; pin change detection - forward acting decade counter
; isr set to shift to the left
; osr set to shift to the left
.program test      
.origin 0
    jmp sample_pin
    jmp pin_rising
    jmp sample_pin
    jmp sample_pin
.wrap_target
update:
    mov pins, osr       ; light up led
    out null, 1         ; shift one to the 
sample_pin:
    mov isr, null       ; clear isr
    in y, 1             ; shift in previous pin state
    in pins, 1          ; shift in current pin state
    mov y, isr          ; copy pin states to y
    mov pc, isr         ; reset program counter to relevent event
pin_rising:
    jmp !osre, next     ; jmp to next if osr is not empty
    mov isr, null       ; clear isr
    set x, 1            ; use x to shift in a 1 to the isr
    in x, 1             ; shift 1 in to the isr
    mov osr, isr        ; copy isr to osr
    set x, 16           ; set x to #leds
next:    
    jmp x-- update      ; if x is 0 then flush osr
    mov osr, null       ; clear osr
    out null, 32        ; push zeros out to end to indicate empty
    jmp pin_rising
.wrap

% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void test_program_init(PIO pio, uint sm, uint offset, uint in_pin, uint out_pin_base, uint num_pins) {
    pio_sm_config c = test_program_get_default_config(offset);

    pio_sm_set_consecutive_pindirs(pio, sm, in_pin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, out_pin_base, num_pins, true);

    sm_config_set_in_pins(&c, in_pin);
    sm_config_set_out_pins(&c, out_pin_base ,num_pins);

	
	sm_config_set_in_shift(&c, false, false, 32); // isr shift to left, autopull disabled
    sm_config_set_out_shift(&c, false, false, 32); // osr shift to left, autopull disabled

    pio_gpio_init(pio, in_pin);
    for(uint i = 0; i < num_pins; ++i)
        pio_gpio_init(pio, i + out_pin_base );
   
    pio_sm_init(pio, sm, offset, &c);
}
%}
