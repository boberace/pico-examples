.program pin_encoder
; the code must be loaded at address 0, because it uses computed jumps
.origin 0
.side_set 1 opt

; this code monitors a pin and counts when it changes from low to high
; on pin rise, it decrements the y scratch register and pushes the negate value to the RX FIFO
; uses side set to turn on a debug led when the pin goes high and off when the pin goes low
; scratch register just wraps around

; computed jumps: 
    JMP sample          ; 0b00 (0) previous 0 current 0 - no pin change - go sample again
    JMP update side 1   ; 0b01 (1) previous 0 current 1 - pin rise - turn on debug led - go update
    JMP sample side 0   ; 0b10 (2) previous 1 current 0 - pin fall - turn off debug led - go sample again
    JMP sample          ; 0b11 (3) previous 1 current 1 - no pin change - go sample again

update:
    jmp y--, continue_update [2] ; decrement y, always go to next instruction, take 2 more cycles to match sample cycles
continue_update:
    MOV ISR, ~Y  ; copy Y scratch register negate into ISR, this is the tic increment value
    PUSH noblock ; push contents of ISR to RX FIFO (clears ISR), don't wait

sample:
    OUT ISR, 1    ; shift previous state of input pin stored in OSR to ISR 
    IN PINS, 1    ; shift in current state of input pin into ISR next to previous state of input pin    
    MOV OSR, ISR  ; copy the ISR to OSR so that we can get the current value as previous value next cycle
    MOV PC, ISR   ; jump to the computed address to update if pin change or sample again if no change
