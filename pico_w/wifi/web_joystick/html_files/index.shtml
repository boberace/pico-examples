<!DOCTYPE html>
<html lang="en-US">
<head>

  <meta name="viewport" content="width=device-width, user-scalable=1">
  <title>PicoW</title>
  <link rel="icon" type="image/png" href="/favicon.ico">

  <style>
    .container {
      display: flex;
      width: 100%;
      justify-content: space-between;
    }
    .square {
      display: flex;
      justify-content: center;
      align-items: center;
      width: calc(50vw - 10px);
      height: calc(50vw - 10px);
      border: 1px solid black;
    }
    .rectangle {
      display: flex;
      justify-content: space-around;
      align-items: center;
      width: 100%;
      height: calc((50vw - 10px) / 4);
      border: 1px solid black;
    }
    .vslider, .hslider {
      -webkit-appearance: none;
      width: 90%;
      margin: 0 5%;
      background-color: lightblue;
    }
    .rectangle div {
      display: flex;
      align-items: center;
    }
    .rectangle label {
      margin-left: 5px;
    }
    .hslider {
      height: 2em;
    }
    .vslider {
      height: 2em;
      transform: rotate(-90deg);
    }
</style>
</head>
<body>

  <div class="rectangle">
    <!-- <div>
      <input type="checkbox" id="override1" name="override">
      <label for="override">Override Local</label>
    </div>

    <div>
      <input type="checkbox" id="enable2" name="enable">
      <label for="enable">Enable Control</label>
    </div> -->
  </div>



  <div class="container">
    <div id="container1" class="square">
      <!-- <input id="rangeValue1" type="range" min=0 max=100  step=1 class="hslider" onmouseup="this.value=50" ontouchend="this.value=50"> -->
      <input id="rangeValue1" type="range" min=0 max=100  step=1 class="hslider">
      <label for="rangeValue1">_</label><br>
    </div>

    <div id="container2" class="square">
      <input id="rangeValue2" type="range" min=0 max=100  step=1 class="vslider">
      <label for="rangeValue2">_</label><br>
    </div>
  </div>

<script>

  const url = 'http://picow.local'; // Ensure the correct protocol is used
  const serverPort = 4242; // Define the server port
  const pageChar = 'a' // make unique for each page

  document.addEventListener("DOMContentLoaded", function() {

    initValues();
  });

  function getElementIdNumber(element){
    return parseInt(element.id.match(/\d+/)[0])
  }

  function getElementIdName(element){
    return element.id.match(/[a-zA-Z]+/)[0]
  }

  function getElementNameNumber(element){
    return parseInt(element.name.match(/\d+/)[0])
  }

  function getElementNameName(element){
    return element.name.match(/[a-zA-Z]+/)[0]
  }

  async function handleRange(event){
    const inputElement = event.target;
    // should I do this now or after get response from the microcontroller when setting value?
    inputElement.parentElement.querySelector("label[for='" + inputElement.id + "']").innerHTML = inputElement.value;    
    const value = await setValue(getElementIdNumber(inputElement), 'r', inputElement.value);
    if(value != inputElement.value){
      console.log("handleRange sent value: ",inputElement.value, " but returned value: ", value);
    }    
  }

  async function handleCheckbox(event){
    const inputElement = event.target;
    var elementValue = 0;
      if (inputElement.checked == true){
        elementValue = 1;
      }      
    enablesForCheckbox(inputElement)
    const value = await setValue(getElementIdNumber(inputElement), 't', elementValue);
    if(value != elementValue){
      console.log("handleCheckbox sent value: ", elementValue, " but returned value: ", value);
    }  
  }

  async function handleRadio(event){
    const inputElement = event.target;
    const inputidName = getElementIdName(inputElement);
    var elementValue = 0;
    if(inputidName == "enabled" || inputidName == "disabled" || inputidName == "locked"){
      if (inputElement.checked == true){
        if(inputidName == "locked"){
          elementValue = 1;
        } else if (inputidName == "enabled"){
          elementValue = 2;        
        }
      }   
      enablesForRadio(inputElement)
      const value = await setValue(getElementIdNumber(inputElement), 's', elementValue);     
      if(value != elementValue){
        console.log("handleRadio sent value: ", elementValue, " but returned value: ", value);
      } 
    } else {
      console.log("unknown radio")
    }
  }

  async function handleButton(event){
    const inputElement = event.target;
    const tempValue = 1;
    console.log(inputElement.id, "pressed");
    const value = await setValue(getElementIdNumber(inputElement), 'b', tempValue);
    if(value != tempValue){
        console.log("handleButton sent value: ", tempValue, " but returned value: ", value);
      } 
  } 

  function enablesForRadio(radioInput){
    var disable = false;
    var idName = getElementIdName(radioInput);
    if(idName == "disabled" || idName == "locked"){
      disable = true;
    }
    radioInput.parentElement.querySelectorAll('input[type="range"]').forEach(e => e.disabled = disable);
  }

  function enablesForCheckbox(checkboxInput){
    var disable = !checkboxInput.checked
    checkboxInput.parentElement.querySelectorAll('input[type="range"]').forEach(e => e.disabled = disable);
  }


  
  async function initValues(){
      const inputElements = document.querySelectorAll('input');

      // get the values of the inputs from the microcontroller
      for (var i = 0; i < inputElements.length; i++) {

        const inputElement = inputElements[i];
        const inputidName = getElementIdName(inputElement);
        const inputidNumber = getElementIdNumber(inputElement);

        switch(inputElement.type) {
          case "range":
            try {
              const valuer = await getValue(inputidNumber, 'r');
              inputElement.value = valuer;
              const rangeLabel = inputElement.parentElement.querySelector("label[for='" + inputElement.id + "']");       
              rangeLabel.innerHTML = valuer;
            } catch (error) {
              console.error(error);
            }
            break;
          case "radio":
            const name = getElementNameName(inputElement);
              if(name == "radioContainer"){
                if(inputidName == "enabled" || inputidName == "disabled" || inputidName == "locked"){
                  if(inputidName == "disabled"){ // only need to check one for radio set
                      try {
                        const values = await getValue(inputidNumber, 's');
                        var radioInput;
                        if (values == 0){
                          radioInput = document.getElementById("disabled" + inputidNumber);
                          radioInput.checked = 1;
                        } else if (values == 1){
                          radioInput = document.getElementById("locked" + inputidNumber);
                          radioInput.checked = 1;
                        } else if (values == 2){
                          radioInput = document.getElementById("enabled" + inputidNumber);
                          radioInput.checked = 1;
                        } else {
                          console.log("unknown radio number: " + values);
                        }
                        enablesForRadio(radioInput);
                      } catch (error) {
                        console.error(error);
                      }
                  }
                }  else {
                  console.log(" *** unknown radio inputidName : " + inputidName);
                }
              }
            break;
          case "checkbox":
            try {
              const valuet = await getValue(inputidNumber, 't');
              inputElement.checked = valuet == 1;
              enablesForCheckbox(inputElement);
            } catch (error) {
              console.error(error);
            }
            break;          
          case "button":
            //button is mometary without memory, this just prevents unknown input
            break;  
          default:
            console.log(" *** unknown input: " + inputElement);
        }
      }
      // todo - get range to update while sliding************************************************************************************
      // add event handlers to the inputs
      document.querySelectorAll('input[type="range"]').forEach(e => e.addEventListener("change", handleRange));
      document.querySelectorAll('input[type="radio"]').forEach(e => e.addEventListener("change", handleRadio));
      document.querySelectorAll('input[type="checkbox"]').forEach(e => e.addEventListener("change", handleCheckbox));
      document.querySelectorAll('input[type="button"]').forEach(e => e.addEventListener("click", handleButton));
 
  }
  function getValue(elementNumber, elementTypeAbbr) {
    return new Promise(function(resolve, reject) {
      const xhr = new XMLHttpRequest();
      const arrayNumber = elementNumber - 1;
      xhr.open("POST", url + ":" + serverPort);
      xhr.setRequestHeader("Content-Type", "text/plain");

      xhr.onload = function() {
        console.log("getvalue recieved: ", pageChar, elementNumber, elementTypeAbbr, xhr.responseText);
        if (xhr.status == 200) {
          resolve(xhr.responseText);
        } else {
          reject(xhr.statusText);
        }
      };

      console.log("getvalue sent: ", pageChar, elementNumber, elementTypeAbbr);
      xhr.send("getvalue" + pageChar + arrayNumber + elementTypeAbbr);
    });
  }

  function setValue(elementNumber, elementTypeAbbr, elementValue) {
    return new Promise(function(resolve, reject) {
      const xhr = new XMLHttpRequest();
      const arrayNumber = elementNumber - 1;
      xhr.open("POST", url + ":" + serverPort);
      xhr.setRequestHeader("Content-Type", "text/plain");

      xhr.onload = function() {
        if (xhr.status == 200) {
          resolve(xhr.responseText);
        } else {
          reject(xhr.statusText);
        }
      };

      console.log("setvalue sent: ", pageChar, elementNumber, elementTypeAbbr, elementValue);
      xhr.send("setvalue" + pageChar + arrayNumber + elementTypeAbbr + elementValue);
    });
  }

// function setValue(elementNumber, elementTypeAbbr, elementValue) {
//   return fetch(`${url}:${serverPort}`, {
//     method: 'POST', 
//     headers: {
//       'Content-Type': 'text/plain'
//     },
//     body: `setvalue${pageChar}${elementNumber - 1}${elementTypeAbbr}${elementValue}`
//   })
//   .then(response => {
//     if (response.ok) {
//       return response.text();
//     } else {
//       throw new Error('Network response was not ok');
//     }
//   })
//   .then(data => {
//     console.log("setvalue received: ", pageChar, elementNumber, elementTypeAbbr, data);
//     return data;
//   })
//   .catch(error => {
//     console.error('There has been a problem with your fetch operation:', error);
//   });
// }

// function getValue(elementNumber, elementTypeAbbr) {
//   const arrayNumber = elementNumber - 1;
//   return fetch(`${url}:${serverPort}`, {
//     method: 'POST', 
//     headers: {
//       'Content-Type': 'text/plain'
//     },
//     body: `getvalue${pageChar}${arrayNumber}${elementTypeAbbr}`
//   })
//   .then(response => {
//     if (response.ok) {
//       return response.text();
//     } else {
//       throw new Error('Network response was not ok');
//     }
//   })
//   .then(data => {
//     console.log("getvalue received: ", pageChar, elementNumber, elementTypeAbbr, data);
//     return data;
//   })
//   .catch(error => {
//     console.error('There has been a problem with your fetch operation:', error);
//   });
// }


</script>

</body>
</html>